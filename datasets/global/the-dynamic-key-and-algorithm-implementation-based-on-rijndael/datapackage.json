{
  "license_title": "Other (Open)",
  "maintainer": "",
  "relationships_as_object": [],
  "private": false,
  "maintainer_email": "",
  "num_tags": 0,
  "id": "457a2803-93f8-4dc4-bca2-fe66aad2ee40",
  "metadata_created": "2013-05-15T03:30:59.992244",
  "metadata_modified": "2013-10-10T23:53:47.338971",
  "author": "",
  "author_email": "",
  "state": "active",
  "version": "",
  "creator_user_id": "b2c4c6e1-3062-44e2-9ace-4ffb12d62d08",
  "type": "dataset",
  "resources": [
    {
      "mimetype": "text/html",
      "cache_url": null,
      "hash": "",
      "description": "Through studying on the Rijndael encryption algorithm, combining the algorithm with the function RAND () of C language and taking computer system time as a seed to generate the pseudorandom number from the function, we construct dynamic keys and a dynamic encryption algorithm, and implement of computer programs. The algorithm allows a key to encrypt the same plaintext many times and the corresponding ciphertexts are different if encryption time does alter. The dynamic encryption algorithm doesn’t only solve the problem of vexing users to modify keys frequently but also enables to encrypt a plaintext more easily, more conveniently and more securely. From the dynamic encryption algorithm we find that it is extremely difficult for an attacker to break a ciphertext using chosen plaintext, known plaintext, or chosen-ciphertext. For encryption users, as long as the key is protected well, he doesn’t need to modify the key for a long time. Therefore, encrypted information becomes more secure.",
      "name": "The Dynamic Key and Algorithm Implementation Based on Rijndael",
      "format": "aspx",
      "url": "http://www.sjie.org/paperInfo.aspx?ID=455",
      "datastore_active": false,
      "cache_last_updated": null,
      "package_id": "457a2803-93f8-4dc4-bca2-fe66aad2ee40",
      "created": "2013-05-14T22:31:00.085415",
      "state": "active",
      "mimetype_inner": "",
      "last_modified": "2013-05-14T22:31:03.521100",
      "position": 0,
      "revision_id": "f15ea67e-7603-4eec-a919-87ce4f40f917",
      "url_type": null,
      "id": "013376f1-a647-4f48-ab58-38ef662fd14b",
      "resource_type": "file",
      "size": "30800"
    }
  ],
  "num_resources": 1,
  "tags": [],
  "groups": [],
  "license_id": "other-open",
  "relationships_as_subject": [],
  "organization": {
    "description": "",
    "created": "2013-10-10T14:24:46.556146",
    "title": "Global",
    "name": "global",
    "is_organization": true,
    "state": "active",
    "image_url": "",
    "revision_id": "6f9b4b38-6781-489c-bb4d-ea106ee7ac37",
    "type": "organization",
    "id": "94d03217-717d-41ce-a20c-00e754e94183",
    "approval_status": "approved"
  },
  "name": "the-dynamic-key-and-algorithm-implementation-based-on-rijndael",
  "isopen": true,
  "url": "",
  "notes": "Through studying on the Rijndael encryption algorithm, combining the algorithm with the function RAND () of C language and taking computer system time as a seed to generate the pseudorandom number from the function, we construct dynamic keys and a dynamic encryption algorithm, and implement of computer programs. The algorithm allows a key to encrypt the same plaintext many times and the corresponding ciphertexts are different if encryption time does alter. The dynamic encryption algorithm doesn’t only solve the problem of vexing users to modify keys frequently but also enables to encrypt a plaintext more easily, more conveniently and more securely. From the dynamic encryption algorithm we find that it is extremely difficult for an attacker to break a ciphertext using chosen plaintext, known plaintext, or chosen-ciphertext. For encryption users, as long as the key is protected well, he doesn’t need to modify the key for a long time. Therefore, encrypted information becomes more secure.  http://www.sjie.org/paperInfo.aspx?ID=455",
  "owner_org": "94d03217-717d-41ce-a20c-00e754e94183",
  "extras": [],
  "title": "The Dynamic Key and Algorithm Implementation Based on Rijndael",
  "revision_id": "3e9eb37a-ccf9-4db2-8a8b-b59862dcc016"
}