{
  "license_title": "",
  "maintainer": "",
  "relationships_as_object": [],
  "private": false,
  "maintainer_email": "",
  "num_tags": 0,
  "id": "8c091f68-327b-4edc-9917-5002a1f1c1a5",
  "metadata_created": "2012-09-11T01:49:34.466772",
  "metadata_modified": "2013-10-10T20:33:18.742078",
  "author": "",
  "author_email": "",
  "state": "active",
  "version": "",
  "creator_user_id": "227ff457-ac7d-46c8-b5e4-e3e8ad99cd21",
  "type": "dataset",
  "resources": [],
  "num_resources": 0,
  "tags": [],
  "groups": [],
  "license_id": "",
  "relationships_as_subject": [],
  "organization": {
    "description": "",
    "created": "2013-10-10T14:24:46.556146",
    "title": "Global",
    "name": "global",
    "is_organization": true,
    "state": "active",
    "image_url": "",
    "revision_id": "6f9b4b38-6781-489c-bb4d-ea106ee7ac37",
    "type": "organization",
    "id": "94d03217-717d-41ce-a20c-00e754e94183",
    "approval_status": "approved"
  },
  "name": "design_pattern_used_for_software_development",
  "isopen": false,
  "url": "",
  "notes": "There are three types of design pattern broadly categorized into.\n\n<a href='http://software2012downloads.com/'>software 2012</a> Creational Design Pattern: Pattern used to create objects\n\nSingleton: Ensure that only one instance of a class is created \nFactory(Simplified version of Factory Method) \nFactory Method: \nAbstract Factory: \nBuilder: Defines an instance for creation but letting subclasses decide which class to instantiate and Allows a finer control over the construction process. \nPrototype: Specify to create using a prototypical instance, and create by copying this prototype. \nObject Pool: Re-uses and shares that are expensive to create\n\nBehavioral Design Patterns:\n\nChain of Responsibiliy: It avoids attaching the sender of a request to its receiver, giving this way others the possibility of handling the request too. \nCommand: Encapsulate a request, Allows the parameterization of clients with different requests and Allows saving the requests in a queue. \nInterpreter: Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language. Map a domain to a language, the language to a grammar, and the grammar to a hierarchical design \nIterator: Provide a way to access the elements of an aggregate sequentially without exposing its underlying representation. \nMediator: Mediator promotes loose coupling from referring to each other explicitly, and it lets you vary their interaction independently. \nObserver: Define a one-to-many dependency so that when one changes state, all its dependents are notified and updated automatically. \nStrategy: Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it. \nTemplate Method: Define the skeleton of an algorithm in an operation, deferring some steps to subclasses / Template Method lets subclasses redefine certain steps of an algorithm without letting them to change the algorithm's structure. \nVisitor: Represents an operation to be performed on the elements, Visitor lets you define a new operation without changing the classes of the elements on which it operates. \nNull Object: It hides the detail from its collaborators. \n\nStructural Design Patterns:\n\nAdapter: Adapter lets classes work together, that could not otherwise because of incompatible interfaces. \nBridge: \nComposite: Compose into tree structures to represent part-whole hierarchies. / Composite lets clients treat individual items and compositions uniformly. \nDecorator: Add additional responsibilities dynamically. \nFlyweight: Use sharing to support a large numbers that have part of their internal state in common where the other part of state can vary. \nMemento: Capture the internal state without violating encapsulation and thus providing a mean for restoring the initial state when needed. \nProxy: Provide a Placeholder to control references to it.",
  "owner_org": "94d03217-717d-41ce-a20c-00e754e94183",
  "extras": [],
  "title": "Design Pattern Used for Software Development",
  "revision_id": "09662fc2-d800-47fb-936b-d5f7592311ce"
}